# -*- coding: utf-8 -*-
"""22301645_Nabonita Saha_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jXFD2G0o-l_HwqRfi1Js7mHAwPqKIuKm
"""

#22301645_Nabonita Saha

import heapq


def form_graph(input_file):

    heuristic = {}
    graph = {}


    with open(input_file, 'r') as file:
        for each_row in file:
            row_parts = each_row.strip().split()
            if len(row_parts)< 2:   #used this line to skip any form of discrepancy line within each line
              continue

            else:
              node = row_parts[0]
              heuristic[node] = int(row_parts[1])
              graph[node] = []     #basically I created a key of each node and its corresponding empty list for its adjacent neighbor(s)

            for i in range(2, len(row_parts), 2):
                neighbor = row_parts[i]
                adj_cost = int(row_parts[i + 1])
                graph[node].append([neighbor, adj_cost])

    return heuristic, graph






def astar_algo( heuristic, graph, start, goal):
    if start not in graph or goal not in graph:
        return None, None
    p_queue = []                          3
    heuristic_val = heuristic[start]
    heapq.heappush(p_queue, (heuristic_val, 0, start, []))  # (f(n)=g(n)+h(n), g(n), current node, path)
    visited = set()


    while len(p_queue)>0:
        f, g, current_node, path = heapq.heappop(p_queue)

        if current_node in visited:
            continue  # Visited node is not considered here

        path = path + [current_node]
        visited.add(current_node)

        if current_node == goal:
            return path, g

        for neighbor, cost in graph[current_node]:
            if neighbor in visited:  #iterates over all neighboring nodes of current node . Avoids re-inserting visited nodes
                continue
            g_new = cost + g
            if neighbor in heuristic:
                heuristic_val = heuristic[neighbor]

            f_new = g_new + heuristic_val
            heapq.heappush(p_queue, [f_new, g_new, neighbor, path])

    return None, None  # No path found hoy




#STARTING OF THE CODE :
#=====================
input_file = "Input file (1).txt"
output_file = "outputfile.txt"
heuristic, graph = form_graph(input_file)
#print(heuristic)
#print(graph)

start = input("Start node: ")
goal = input("Destination: ")

path, cost = astar_algo( heuristic, graph, start, goal)

with open(output_file, "w") as file:
    if path == None:
        file.write("NO PATH FOUND\n")
    else:
        file.write("Path: " + " -> ".join(path) + "\n")
        file.write("Total distance: " + str(cost) + " km\n")

#print("The generated output has been shown in the ", output_file)